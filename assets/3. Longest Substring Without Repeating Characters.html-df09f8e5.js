import{a1 as n,a2 as s,a3 as a,a8 as t}from"./framework-b045dc94.js";const e={},p=t(`<h2 id="_3-longest-substring-without-repeating-characters" tabindex="-1"><a class="header-anchor" href="#_3-longest-substring-without-repeating-characters" aria-hidden="true">#</a> 3. Longest Substring Without Repeating Characters</h2><p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <strong>substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> s = &quot;abcabcbb&quot; <strong>Output:</strong> 3 <strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.</p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> s = &quot;bbbbb&quot; <strong>Output:</strong> 1 <strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.</p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> s = &quot;pwwkew&quot; <strong>Output:</strong> 3 <strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3. Notice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</p><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> consists of English letters, digits, symbols and spaces.</li></ul><h2 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> solution</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**  
 * 3. Longest Substring Without Repeating Characters * 滑动窗口  
 */</span>  
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
  
    <span class="token comment">//双指针维护滑动窗口  </span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    <span class="token comment">//hashmap 维护 值和索引，保存滑动窗口内的值和索引  </span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">char</span> cur <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">//right指针的值包含在滑动窗口内  </span>
        <span class="token comment">//left向右移动，移除hashmap中元素，  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            hashMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
            <span class="token comment">//删除时，可以不更新max，因为肯定变小  </span>
            <span class="token comment">//max = Math.max(max, right - left);  </span>
            <span class="token comment">// 不包括，则向右移动更新map  </span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            right <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","3. Longest Substring Without Repeating Characters.html.vue"]]);export{r as default};
