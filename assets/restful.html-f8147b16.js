import{a1 as l,a2 as t,a3 as a,a4 as e,a6 as u,a7 as r,a8 as c,J as i}from"./framework-b045dc94.js";const h={},p=c('<h3 id="restful定义" tabindex="-1"><a class="header-anchor" href="#restful定义" aria-hidden="true">#</a> restful定义</h3><ul><li><p>REST（Representational State Transfer）是一种设计风格，用于构建网络应用程序。它提供了一组规则和指南，帮助开发人员创建可扩展的、结构化的 API（应用程序编程接口）。</p></li><li><p>RESTful API 就是遵循 REST 设计原则构建的 API。这些原则包括：</p></li><li><p>使用 HTTP 协议的标准方法（例如 GET、PUT、POST 和 DELETE）来操作资源。 使用资源的 URI 来唯一地标识它。 使用网络上的标准协议（例如 HTTP、FTP 等）来传输数据。 使用 XML、JSON 等格式来表示资源。 遵循 REST 设计原则可以使 API 更简单、可扩展、易于理解，也更易于实现。</p></li></ul><h3 id="幂等性" tabindex="-1"><a class="header-anchor" href="#幂等性" aria-hidden="true">#</a> 幂等性</h3><ul><li><p>幂等性是指一个操作或请求具有以下特性：</p></li><li><p>不管执行多少次，其结果都一样。 执行一次与执行多次没有区别。 幂等性通常用于描述网络操作，例如 HTTP 请求。在 HTTP 协议中，幂等性指的是 GET、HEAD、PUT、DELETE 方法是幂等的，而 POST 方法不是幂等的。</p></li><li><p>幂等性对于网络应用程序来说非常重要，因为它可以确保操作的稳定性，避免由于网络故障等原因导致的操作重复或失败。</p></li></ul><h3 id="restful-api" tabindex="-1"><a class="header-anchor" href="#restful-api" aria-hidden="true">#</a> restful Api</h3><h4 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h4><ul><li>get <blockquote><p>幂等</p></blockquote></li></ul><h4 id="新增" tabindex="-1"><a class="header-anchor" href="#新增" aria-hidden="true">#</a> 新增</h4><ul><li><p>post</p><blockquote><p>在资源上创建一个新的子资源，非幂等</p></blockquote><blockquote><p>POST 方法不是幂等的，因为它每次执行都会在资源上创建一个新的子资源。不管执行多少次，新创建的子资源都会增加。</p></blockquote><blockquote><p>例如，如果我们向某个 URI 发送一个 POST 请求，并且请求内容为 &quot;hello&quot;，那么服务器就会在该资源下创建一个子资源，并将其内容设置为 &quot;hello&quot;。如果我们再次向同一个 URI 发送相同的请求，服务器就会在该资源下再创建一个子资源，并将其内容设置为 &quot;hello&quot;。执行多次后，该资源下会有多个子资源，而不是只有一个。</p></blockquote><blockquote><p>因此，执行多次 POST 方法会产生不同的结果，所以它不是幂等的。</p></blockquote></li></ul><h4 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h4><ul><li><p>put</p><blockquote><p>put 用于更新资源的内容，并将其替换成新的内容。幂等</p></blockquote><blockquote><p>PUT 方法是幂等的，因为它每次执行都会更新资源的内容，并将其替换成新的内容。不管执行多少次，资源的内容都会被替换成相同的内容。</p></blockquote><blockquote><p>例如，如果我们向某个 URI 发送一个 PUT 请求，并且请求内容为 &quot;hello&quot;，那么该资源的内容就会被替换为 &quot;hello&quot;。如果我们再次向同一个 URI 发送相同的请求，资源的内容依然会被替换为 &quot;hello&quot;，而不会变成 &quot;hellohello&quot; 或其他内容。</p></blockquote><blockquote><p>因此，无论执行多少次，PUT 方法的结果都一样，所以它是幂等的。</p></blockquote></li><li><p>patch</p><blockquote><p>PATCH方法是新引入的，是对PUT方法的补充，用来对已知资源进行局部更新</p></blockquote><blockquote><p>PATCH 用于对资源进行部分修改。非幂等</p></blockquote><blockquote><p>PATCH 方法不是幂等的，它每次执行都会修改资源的部分内容。</p></blockquote><blockquote><p>如果每次执行 PATCH 方法时修改的内容都完全相同，那么 PATCH 方法就可以看作是幂等的。但是，如果每次执行 PATCH 方法时修改的内容不同，那么 PATCH 方法就不是幂等的。</p></blockquote><blockquote><p>例如，如果我们首次执行 PATCH 方法时修改的内容为 &quot;hello&quot;，第二次执行时修改的内容为 &quot;world&quot;，那么资源的内容可能会变成 &quot;helloworld&quot;。这样，执行多次 PATCH 方法的结果就不同了。</p></blockquote><blockquote><p>因此，PATCH 方法并不是绝对的幂等方法，它只有在每次执行时修改的内容完全相同的情况下才是幂等的。</p></blockquote></li></ul><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h4><ul><li>delete <blockquote><p>幂等</p></blockquote></li></ul><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考 :</h3>',14),n={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods",target:"_blank",rel:"noopener noreferrer"};function d(q,s){const o=i("ExternalLinkIcon");return t(),a("div",null,[p,e("ul",null,[e("li",null,[e("a",n,[u("HTTP 请求方法 - HTTP | MDN"),r(o)])])])])}const b=l(h,[["render",d],["__file","restful.html.vue"]]);export{b as default};
